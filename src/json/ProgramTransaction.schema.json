{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Program Transaction Schema",
    "description": "Establishes the transaction interface that programs use apply mutations/generate analytics.",
    "type": "object",
    "properties": {
        "programId": {
            "type": "string",
            "title": "Program Identifier"
        },
        "mutations": {
            "type": "array",
            "title": "Mutations",
            "description": "These are actions we would like to be performed by the program engine (i.e. creating a reward or sending an email)",
            "items": {
                "$ref": "#/definitions/mutation"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "programId"
    ],
    "definitions": {
        "user": {
            "type": "object",
            "title": "Mutation User",
            "description": "The mutation will be applied to this user",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "User ID"
                },
                "accountId": {
                    "type": "string",
                    "title": "User Account ID"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "accountId"
            ]
        },
        "mutation": {
            "type": "object",
            "title": "Program Mutation",
            "properties": {
                "type": {
                    "type": "string",
                    "title": "Mutation Type",
                    "description": "The type of mutation to be performed",
                    "enum": [
                        "CREATE_REWARD",
                        "SEND_EMAIL",
                        "MODERATE_GRAPH_NODES"
                    ]
                }
            },
            "dependencies": {
                "type": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/rewardCreation"
                        },
                        {
                            "$ref": "#/definitions/moderateGraphNodes"
                        },
                        {
                            "$ref": "#/definitions/sendEmail"
                        }
                    ]
                }
            }
        },
        "rewardCreation": {
            "properties": {
                "type": {
                    "enum": [
                        "CREATE_REWARD"
                    ]
                },
                "key": {
                    "type": "string",
                    "title": "Reward Key",
                    "description": "The program template key used to establish the relationship between this reward and the program"
                },
                "rewardId": {
                    "type": "string",
                    "title": "Reward ID",
                    "description": "A unique BSON ObjectID used to identify the reward, if not set this will be auto-generated. Use this to link with emails."
                },
                "referralId": {
                    "type": "string",
                    "title": "Referral ID",
                    "description": "The referral ID for the event to be marked as a source of this reward"
                },
                "status": {
                    "type": "string",
                    "title": "Initial Reward Status",
                    "description": "This status defines the state the reward will be in when immediately after it is created",
                    "enum": [
                        "AVAILABLE",
                        "PENDING",
                        "CANCELLED"
                    ]
                },
                "user": {
                    "$ref": "#/definitions/user"
                },
                "userEvent": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string",
                            "title": "Event Key",
                            "description": "The key of the event to be marked as a source of this reward"
                        },
                        "id": {
                            "type": "string",
                            "title": "Event ID",
                            "description": "The unique identifier of the event to be marked as a source of this reward"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "key",
                        "id"
                    ]
                },
                "rewardProperties": {
                    "type": "object",
                    "title": "Reward Properties",
                    "description": "Reward properties may be fully or partially set depending on whether the reward is configured as dynamic",
                    "oneOf":[
                        {
                            "properties": {
                                "override": {
                                    "type": "object",
                                    "title": "Reward Override",
                                    "description": "Properties included here will override or be added to properties setup via program reward configuration",
                                    "properties": {
                                        "dateScheduledFor": {
                                            "type": "integer",
                                            "title": "Scheduled Reward Given Date",
                                            "description": "If the reward is created in a PENDING state this is the date we will attempt to 'give' it"
                                        },
                                        "dateExpires": {
                                            "type": "integer",
                                            "title": "Reward Expiry Date",
                                            "description": "The date this reward is scheduled to expire if the reward is expirable"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "required":[
                                "override"
                            ]
                        },
                        {
                            "properties": {
                                "dynamic": {
                                    "type": "object",
                                    "title": "If the reward is marked as dynamic by the program template these properties will be used to dynamically generate the reward. TODO describe user definition precedence?",
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "required":[
                                "dynamic"
                            ]
                        }
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "type",
                "user"
            ]
        },
        "moderateGraphNodes": {
            "properties": {
                "type": {
                    "enum": [
                        "MODERATE_GRAPH_NODES"
                    ]
                },
                "graphNodeType": {
                    "type": "string",
                    "title": "Graph Node Type",
                    "description": "The type of the graph node(s) to be moderated",
                    "enum": [
                        "REWARD",
                        "PROGRAM_EMAIL",
                        "REFERRAL",
                        "USER_EVENT",
                        "PAYMENT_ACCOUNT"
                    ]
                },
                "filter": {
                    "type": "object",
                    "title": "Moderation Filter",
                    "description": "A GraphQL filter that defines the node(s) to be moderated. See RewardFilterInput, ProgramEmailTransactionFilterInput, ProgramReferralFilterInput, and UserEventDataFilterInput"
               },
                "moderationInput": {
                    "type": "object",
                    "properties": {
                        "action": {
                            "type": "string",
                            "title": "Moderation Action",
                            "description": "The moderation action to apply to the filtered graph node(s)",
                            "enum": [
                                "APPROVE",
                                "DENY",
                                "NOTHING"
                            ]
                        },
                        "maxDepth": {
                            "type": "integer",
                            "title": "Max Depth",
                            "description": "The maximum depth of child nodes to be moderated"
                        }
                    },
                    "additionalProperties": false,
                    "required":[
                        "action",
                        "maxDepth"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "type",
                "graphNodeType",
                "filter",
                "moderationInput"
            ]
        },
        "sendEmail": {
            "properties": {
                "type": {
                    "enum": [
                        "SEND_EMAIL"
                    ]
                },
                "key": {
                    "type": "string",
                    "title": "Email Key",
                    "description": "The program template key of the email to send"
                },
                "rewardId": {
                    "type": "string",
                    "title": "Email Reward ID",
                    "description": "If included this defines the reward that will be available in the email render context"
                },
                "user": {
                    "$ref": "#/definitions/user"
                },
                "query": {
                    "type": "string",
                    "title": "Email Query",
                    "description": "The GraphQL query used to build the context for this email"
                },
                "queryVariables": {
                    "type": "object",
                    "title": "Email Query Variables",
                    "description": "This variables object parameterizes the GraphQL Email query"
                }
            },
            "additionalProperties": false,
            "required":[
                "type",
                "key",
                "user",
                "query",
                "queryVariables"
            ]
        }
    }
}